{ "cells": [  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<p style=\"text-align:center\">\n",    "    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkPY0220ENSkillsNetwork900-2022-01-01\" target=\"_blank\">\n",    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\">\n",    "    </a>\n",    "</p>\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<h1>Extracting and Visualizing Stock Data</h1>\n",    "<h2>Description</h2>\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Extracting essential data from a dataset and displaying it is a necessary part of data science; therefore individuals can make correct decisions based on the data. In this assignment, you will extract some stock data, you will then display this data in a graph.\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<h2>Table of Contents</h2>\n",    "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",    "    <ul>\n",    "        <li>Define a Function that Makes a Graph</li>\n",    "        <li>Question 1: Use yfinance to Extract Stock Data</li>\n",    "        <li>Question 2: Use Webscraping to Extract Tesla Revenue Data</li>\n",    "        <li>Question 3: Use yfinance to Extract Stock Data</li>\n",    "        <li>Question 4: Use Webscraping to Extract GME Revenue Data</li>\n",    "        <li>Question 5: Plot Tesla Stock Graph</li>\n",    "        <li>Question 6: Plot GameStop Stock Graph</li>\n",    "    </ul>\n",    "<p>\n",    "    Estimated Time Needed: <strong>30 min</strong></p>\n",    "</div>\n",    "\n",    "<hr>\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "***Note***:- If you are working Locally using anaconda, please uncomment the following code and execute it.\n",    "Use the version as per your python version.\n"   ]  },  {   "cell_type": "code",   "execution_count": 1,   "metadata": {},   "outputs": [    {     "name": "stdout",     "output_type": "stream",     "text": [      "Requirement already satisfied: yfinance in /opt/conda/lib/python3.12/site-packages (0.2.60)\n",      "Requirement already satisfied: pandas>=1.3.0 in /opt/conda/lib/python3.12/site-packages (from yfinance) (2.2.3)\n",      "Requirement already satisfied: numpy>=1.16.5 in /opt/conda/lib/python3.12/site-packages (from yfinance) (2.2.5)\n",      "Requirement already satisfied: requests>=2.31 in /opt/conda/lib/python3.12/site-packages (from yfinance) (2.32.3)\n",      "Requirement already satisfied: multitasking>=0.0.7 in /opt/conda/lib/python3.12/site-packages (from yfinance) (0.0.11)\n",      "Requirement already satisfied: platformdirs>=2.0.0 in /opt/conda/lib/python3.12/site-packages (from yfinance) (4.3.6)\n",      "Requirement already satisfied: pytz>=2022.5 in /opt/conda/lib/python3.12/site-packages (from yfinance) (2024.2)\n",      "Requirement already satisfied: frozendict>=2.3.4 in /opt/conda/lib/python3.12/site-packages (from yfinance) (2.4.6)\n",      "Requirement already satisfied: peewee>=3.16.2 in /opt/conda/lib/python3.12/site-packages (from yfinance) (3.18.1)\n",      "Requirement already satisfied: beautifulsoup4>=4.11.1 in /opt/conda/lib/python3.12/site-packages (from yfinance) (4.13.4)\n",      "Requirement already satisfied: curl_cffi>=0.7 in /opt/conda/lib/python3.12/site-packages (from yfinance) (0.10.0)\n",      "Requirement already satisfied: protobuf>=3.19.0 in /opt/conda/lib/python3.12/site-packages (from yfinance) (6.30.2)\n",      "Requirement already satisfied: websockets>=13.0 in /opt/conda/lib/python3.12/site-packages (from yfinance) (15.0.1)\n",      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.12/site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.5)\n",      "Requirement already satisfied: typing-extensions>=4.0.0 in /opt/conda/lib/python3.12/site-packages (from beautifulsoup4>=4.11.1->yfinance) (4.12.2)\n",      "Requirement already satisfied: cffi>=1.12.0 in /opt/conda/lib/python3.12/site-packages (from curl_cffi>=0.7->yfinance) (1.17.1)\n",      "Requirement already satisfied: certifi>=2024.2.2 in /opt/conda/lib/python3.12/site-packages (from curl_cffi>=0.7->yfinance) (2024.12.14)\n",      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.12/site-packages (from pandas>=1.3.0->yfinance) (2.9.0.post0)\n",      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.12/site-packages (from pandas>=1.3.0->yfinance) (2025.2)\n",      "Requirement already satisfied: charset_normalizer<4,>=2 in /opt/conda/lib/python3.12/site-packages (from requests>=2.31->yfinance) (3.4.1)\n",      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.12/site-packages (from requests>=2.31->yfinance) (3.10)\n",      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.12/site-packages (from requests>=2.31->yfinance) (2.3.0)\n",      "Requirement already satisfied: pycparser in /opt/conda/lib/python3.12/site-packages (from cffi>=1.12.0->curl_cffi>=0.7->yfinance) (2.22)\n",      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.12/site-packages (from python-dateutil>=2.8.2->pandas>=1.3.0->yfinance) (1.17.0)\n",      "Requirement already satisfied: bs4 in /opt/conda/lib/python3.12/site-packages (0.0.2)\n",      "Requirement already satisfied: beautifulsoup4 in /opt/conda/lib/python3.12/site-packages (from bs4) (4.13.4)\n",      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.12/site-packages (from beautifulsoup4->bs4) (2.5)\n",      "Requirement already satisfied: typing-extensions>=4.0.0 in /opt/conda/lib/python3.12/site-packages (from beautifulsoup4->bs4) (4.12.2)\n",      "Requirement already satisfied: nbformat in /opt/conda/lib/python3.12/site-packages (5.10.4)\n",      "Requirement already satisfied: fastjsonschema>=2.15 in /opt/conda/lib/python3.12/site-packages (from nbformat) (2.21.1)\n",      "Requirement already satisfied: jsonschema>=2.6 in /opt/conda/lib/python3.12/site-packages (from nbformat) (4.23.0)\n",      "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /opt/conda/lib/python3.12/site-packages (from nbformat) (5.7.2)\n",      "Requirement already satisfied: traitlets>=5.1 in /opt/conda/lib/python3.12/site-packages (from nbformat) (5.14.3)\n",      "Requirement already satisfied: attrs>=22.2.0 in /opt/conda/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat) (25.1.0)\n",      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /opt/conda/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat) (2024.10.1)\n",      "Requirement already satisfied: referencing>=0.28.4 in /opt/conda/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat) (0.36.2)\n",      "Requirement already satisfied: rpds-py>=0.7.1 in /opt/conda/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat) (0.22.3)\n",      "Requirement already satisfied: platformdirs>=2.5 in /opt/conda/lib/python3.12/site-packages (from jupyter-core!=5.0.*,>=4.12->nbformat) (4.3.6)\n",      "Requirement already satisfied: typing-extensions>=4.4.0 in /opt/conda/lib/python3.12/site-packages (from referencing>=0.28.4->jsonschema>=2.6->nbformat) (4.12.2)\n",      "Requirement already satisfied: plotly in /opt/conda/lib/python3.12/site-packages (5.24.1)\n",      "Collecting plotly\n",      "  Downloading plotly-6.0.1-py3-none-any.whl.metadata (6.7 kB)\n",      "Collecting narwhals>=1.15.1 (from plotly)\n",      "  Downloading narwhals-1.38.2-py3-none-any.whl.metadata (9.4 kB)\n",      "Requirement already satisfied: packaging in /opt/conda/lib/python3.12/site-packages (from plotly) (24.2)\n",      "Downloading plotly-6.0.1-py3-none-any.whl (14.8 MB)\n",      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m14.8/14.8 MB\u001b[0m \u001b[31m138.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",      "\u001b[?25hDownloading narwhals-1.38.2-py3-none-any.whl (338 kB)\n",      "Installing collected packages: narwhals, plotly\n",      "  Attempting uninstall: plotly\n",      "    Found existing installation: plotly 5.24.1\n",      "    Uninstalling plotly-5.24.1:\n",      "      Successfully uninstalled plotly-5.24.1\n",      "Successfully installed narwhals-1.38.2 plotly-6.0.1\n"     ]    }   ],   "source": [    "!pip install yfinance\n",    "!pip install bs4\n",    "!pip install nbformat\n",    "!pip install --upgrade plotly"   ]  },  {   "cell_type": "code",   "execution_count": 6,   "metadata": {},   "outputs": [],   "source": [    "import yfinance as yf\n",    "import pandas as pd\n",    "import requests\n",    "from bs4 import BeautifulSoup\n",    "import plotly.graph_objects as go\n",    "from plotly.subplots import make_subplots"   ]  },  {   "cell_type": "code",   "execution_count": 7,   "metadata": {},   "outputs": [],   "source": [    "import plotly.io as pio\n",    "pio.renderers.default = \"iframe\""   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "In Python, you can ignore warnings using the warnings module. You can use the filterwarnings function to filter or ignore specific warning messages or categories.\n"   ]  },  {   "cell_type": "code",   "execution_count": 8,   "metadata": {},   "outputs": [],   "source": [    "import warnings\n",    "# Ignore all warnings\n",    "warnings.filterwarnings(\"ignore\", category=FutureWarning)"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "## Define Graphing Function\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "In this section, we define the function `make_graph`. **You don't have to know how the function works, you should only care about the inputs. It takes a dataframe with stock data (dataframe must contain Date and Close columns), a dataframe with revenue data (dataframe must contain Date and Revenue columns), and the name of the stock.**\n"   ]  },  {   "cell_type": "code",   "execution_count": 9,   "metadata": {},   "outputs": [],   "source": [    "def make_graph(stock_data, revenue_data, stock):\n",    "    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=(\"Historical Share Price\", \"Historical Revenue\"), vertical_spacing = .3)\n",    "    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']\n",    "    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']\n",    "    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype(\"float\"), name=\"Share Price\"), row=1, col=1)\n",    "    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype(\"float\"), name=\"Revenue\"), row=2, col=1)\n",    "    fig.update_xaxes(title_text=\"Date\", row=1, col=1)\n",    "    fig.update_xaxes(title_text=\"Date\", row=2, col=1)\n",    "    fig.update_yaxes(title_text=\"Price ($US)\", row=1, col=1)\n",    "    fig.update_yaxes(title_text=\"Revenue ($US Millions)\", row=2, col=1)\n",    "    fig.update_layout(showlegend=False,\n",    "    height=900,\n",    "    title=stock,\n",    "    xaxis_rangeslider_visible=True)\n",    "    fig.show()\n",    "    from IPython.display import display, HTML\n",    "    fig_html = fig.to_html()\n",    "    display(HTML(fig_html))"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Use the make_graph function that we’ve already defined. You’ll need to invoke it in questions 5 and 6 to display the graphs and create the dashboard. \n",    "> **Note: You don’t need to redefine the function for plotting graphs anywhere else in this notebook; just use the existing function.**\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "## Question 1: Use yfinance to Extract Stock Data\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Using the `Ticker` function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is `TSLA`.\n"   ]  },  {   "cell_type": "code",   "execution_count": 42,   "metadata": {},   "outputs": [],   "source": [    "tesla=yf.Ticker(\"TSLA\")"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Using the ticker object and the function `history` extract stock information and save it in a dataframe named `tesla_data`. Set the `period` parameter to ` \"max\" ` so we get information for the maximum amount of time.\n"   ]  },  {   "cell_type": "code",   "execution_count": 43,   "metadata": {},   "outputs": [    {     "data": {      "text/html": [       "<div>\n",       "<style scoped>\n",       "    .dataframe tbody tr th:only-of-type {\n",       "        vertical-align: middle;\n",       "    }\n",       "\n",       "    .dataframe tbody tr th {\n",       "        vertical-align: top;\n",       "    }\n",       "\n",       "    .dataframe thead th {\n",       "        text-align: right;\n",       "    }\n",       "</style>\n",       "<table border=\"1\" class=\"dataframe\">\n",       "  <thead>\n",       "    <tr style=\"text-align: right;\">\n",       "      <th></th>\n",       "      <th>Open</th>\n",       "      <th>High</th>\n",       "      <th>Low</th>\n",       "      <th>Close</th>\n",       "      <th>Volume</th>\n",       "      <th>Dividends</th>\n",       "      <th>Stock Splits</th>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>Date</th>\n",       "      <th></th>\n",       "      <th></th>\n",       "      <th></th>\n",       "      <th></th>\n",       "      <th></th>\n",       "      <th></th>\n",       "      <th></th>\n",       "    </tr>\n",       "  </thead>\n",       "  <tbody>\n",       "    <tr>\n",       "      <th>2010-06-29 00:00:00-04:00</th>\n",       "      <td>1.266667</td>\n",       "      <td>1.666667</td>\n",       "      <td>1.169333</td>\n",       "      <td>1.592667</td>\n",       "      <td>281494500</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2010-06-30 00:00:00-04:00</th>\n",       "      <td>1.719333</td>\n",       "      <td>2.028000</td>\n",       "      <td>1.553333</td>\n",       "      <td>1.588667</td>\n",       "      <td>257806500</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2010-07-01 00:00:00-04:00</th>\n",       "      <td>1.666667</td>\n",       "      <td>1.728000</td>\n",       "      <td>1.351333</td>\n",       "      <td>1.464000</td>\n",       "      <td>123282000</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2010-07-02 00:00:00-04:00</th>\n",       "      <td>1.533333</td>\n",       "      <td>1.540000</td>\n",       "      <td>1.247333</td>\n",       "      <td>1.280000</td>\n",       "      <td>77097000</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2010-07-06 00:00:00-04:00</th>\n",       "      <td>1.333333</td>\n",       "      <td>1.333333</td>\n",       "      <td>1.055333</td>\n",       "      <td>1.074000</td>\n",       "      <td>103003500</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>...</th>\n",       "      <td>...</td>\n",       "      <td>...</td>\n",       "      <td>...</td>\n",       "      <td>...</td>\n",       "      <td>...</td>\n",       "      <td>...</td>\n",       "      <td>...</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2025-05-05 00:00:00-04:00</th>\n",       "      <td>284.570007</td>\n",       "      <td>284.850006</td>\n",       "      <td>274.399994</td>\n",       "      <td>280.260010</td>\n",       "      <td>94618900</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2025-05-06 00:00:00-04:00</th>\n",       "      <td>273.109985</td>\n",       "      <td>277.730011</td>\n",       "      <td>271.350006</td>\n",       "      <td>275.350006</td>\n",       "      <td>76715800</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2025-05-07 00:00:00-04:00</th>\n",       "      <td>276.880005</td>\n",       "      <td>277.920013</td>\n",       "      <td>271.000000</td>\n",       "      <td>276.220001</td>\n",       "      <td>71592600</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2025-05-08 00:00:00-04:00</th>\n",       "      <td>279.630005</td>\n",       "      <td>289.799988</td>\n",       "      <td>279.410004</td>\n",       "      <td>284.820007</td>\n",       "      <td>97539400</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2025-05-09 00:00:00-04:00</th>\n",       "      <td>290.209991</td>\n",       "      <td>307.040009</td>\n",       "      <td>290.000000</td>\n",       "      <td>298.260010</td>\n",       "      <td>132079700</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "  </tbody>\n",       "</table>\n",       "<p>3740 rows × 7 columns</p>\n",       "</div>"      ],      "text/plain": [       "                                 Open        High         Low       Close  \\\n",       "Date                                                                        \n",       "2010-06-29 00:00:00-04:00    1.266667    1.666667    1.169333    1.592667   \n",       "2010-06-30 00:00:00-04:00    1.719333    2.028000    1.553333    1.588667   \n",       "2010-07-01 00:00:00-04:00    1.666667    1.728000    1.351333    1.464000   \n",       "2010-07-02 00:00:00-04:00    1.533333    1.540000    1.247333    1.280000   \n",       "2010-07-06 00:00:00-04:00    1.333333    1.333333    1.055333    1.074000   \n",       "...                               ...         ...         ...         ...   \n",       "2025-05-05 00:00:00-04:00  284.570007  284.850006  274.399994  280.260010   \n",       "2025-05-06 00:00:00-04:00  273.109985  277.730011  271.350006  275.350006   \n",       "2025-05-07 00:00:00-04:00  276.880005  277.920013  271.000000  276.220001   \n",       "2025-05-08 00:00:00-04:00  279.630005  289.799988  279.410004  284.820007   \n",       "2025-05-09 00:00:00-04:00  290.209991  307.040009  290.000000  298.260010   \n",       "\n",       "                              Volume  Dividends  Stock Splits  \n",       "Date                                                           \n",       "2010-06-29 00:00:00-04:00  281494500        0.0           0.0  \n",       "2010-06-30 00:00:00-04:00  257806500        0.0           0.0  \n",       "2010-07-01 00:00:00-04:00  123282000        0.0           0.0  \n",       "2010-07-02 00:00:00-04:00   77097000        0.0           0.0  \n",       "2010-07-06 00:00:00-04:00  103003500        0.0           0.0  \n",       "...                              ...        ...           ...  \n",       "2025-05-05 00:00:00-04:00   94618900        0.0           0.0  \n",       "2025-05-06 00:00:00-04:00   76715800        0.0           0.0  \n",       "2025-05-07 00:00:00-04:00   71592600        0.0           0.0  \n",       "2025-05-08 00:00:00-04:00   97539400        0.0           0.0  \n",       "2025-05-09 00:00:00-04:00  132079700        0.0           0.0  \n",       "\n",       "[3740 rows x 7 columns]"      ]     },     "execution_count": 43,     "metadata": {},     "output_type": "execute_result"    }   ],   "source": [    "tesla_data=tesla.history(period=\"max\")\n",    "tesla_data"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "**Reset the index** using the `reset_index(inplace=True)` function on the tesla_data DataFrame and display the first five rows of the `tesla_data` dataframe using the `head` function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.\n"   ]  },  {   "cell_type": "code",   "execution_count": 44,   "metadata": {},   "outputs": [    {     "data": {      "text/html": [       "<div>\n",       "<style scoped>\n",       "    .dataframe tbody tr th:only-of-type {\n",       "        vertical-align: middle;\n",       "    }\n",       "\n",       "    .dataframe tbody tr th {\n",       "        vertical-align: top;\n",       "    }\n",       "\n",       "    .dataframe thead th {\n",       "        text-align: right;\n",       "    }\n",       "</style>\n",       "<table border=\"1\" class=\"dataframe\">\n",       "  <thead>\n",       "    <tr style=\"text-align: right;\">\n",       "      <th></th>\n",       "      <th>Date</th>\n",       "      <th>Open</th>\n",       "      <th>High</th>\n",       "      <th>Low</th>\n",       "      <th>Close</th>\n",       "      <th>Volume</th>\n",       "      <th>Dividends</th>\n",       "      <th>Stock Splits</th>\n",       "    </tr>\n",       "  </thead>\n",       "  <tbody>\n",       "    <tr>\n",       "      <th>0</th>\n",       "      <td>2010-06-29 00:00:00-04:00</td>\n",       "      <td>1.266667</td>\n",       "      <td>1.666667</td>\n",       "      <td>1.169333</td>\n",       "      <td>1.592667</td>\n",       "      <td>281494500</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>1</th>\n",       "      <td>2010-06-30 00:00:00-04:00</td>\n",       "      <td>1.719333</td>\n",       "      <td>2.028000</td>\n",       "      <td>1.553333</td>\n",       "      <td>1.588667</td>\n",       "      <td>257806500</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2</th>\n",       "      <td>2010-07-01 00:00:00-04:00</td>\n",       "      <td>1.666667</td>\n",       "      <td>1.728000</td>\n",       "      <td>1.351333</td>\n",       "      <td>1.464000</td>\n",       "      <td>123282000</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>3</th>\n",       "      <td>2010-07-02 00:00:00-04:00</td>\n",       "      <td>1.533333</td>\n",       "      <td>1.540000</td>\n",       "      <td>1.247333</td>\n",       "      <td>1.280000</td>\n",       "      <td>77097000</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>4</th>\n",       "      <td>2010-07-06 00:00:00-04:00</td>\n",       "      <td>1.333333</td>\n",       "      <td>1.333333</td>\n",       "      <td>1.055333</td>\n",       "      <td>1.074000</td>\n",       "      <td>103003500</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "  </tbody>\n",       "</table>\n",       "</div>"      ],      "text/plain": [       "                       Date      Open      High       Low     Close  \\\n",       "0 2010-06-29 00:00:00-04:00  1.266667  1.666667  1.169333  1.592667   \n",       "1 2010-06-30 00:00:00-04:00  1.719333  2.028000  1.553333  1.588667   \n",       "2 2010-07-01 00:00:00-04:00  1.666667  1.728000  1.351333  1.464000   \n",       "3 2010-07-02 00:00:00-04:00  1.533333  1.540000  1.247333  1.280000   \n",       "4 2010-07-06 00:00:00-04:00  1.333333  1.333333  1.055333  1.074000   \n",       "\n",       "      Volume  Dividends  Stock Splits  \n",       "0  281494500        0.0           0.0  \n",       "1  257806500        0.0           0.0  \n",       "2  123282000        0.0           0.0  \n",       "3   77097000        0.0           0.0  \n",       "4  103003500        0.0           0.0  "      ]     },     "execution_count": 44,     "metadata": {},     "output_type": "execute_result"    }   ],   "source": [    "tesla_data.reset_index(inplace=True)\n",    "tesla_data.head()"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "## Question 2: Use Webscraping to Extract Tesla Revenue Data\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Use the `requests` library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm Save the text of the response as a variable named `html_data`.\n"   ]  },  {   "cell_type": "code",   "execution_count": 64,   "metadata": {},   "outputs": [],   "source": [    "url=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm\"\n",    "html_data=requests.get(url).text"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Parse the html data using `beautiful_soup` using parser i.e `html5lib` or `html.parser`.\n"   ]  },  {   "cell_type": "code",   "execution_count": 65,   "metadata": {},   "outputs": [],   "source": [    "soup=BeautifulSoup(html_data,'html.parser')"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Using `BeautifulSoup` or the `read_html` function extract the table with `Tesla Revenue` and store it into a dataframe named `tesla_revenue`. The dataframe should have columns `Date` and `Revenue`.\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<details><summary>Step-by-step instructions</summary>\n",    "\n",    "```\n",    "\n",    "Here are the step-by-step instructions:\n",    "\n",    "1. Create an Empty DataFrame\n",    "2. Find the Relevant Table\n",    "3. Check for the Tesla Quarterly Revenue Table\n",    "4. Iterate Through Rows in the Table Body\n",    "5. Extract Data from Columns\n",    "6. Append Data to the DataFrame\n",    "\n",    "```\n",    "</details>\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<details><summary>Click here if you need help locating the table</summary>\n",    "\n",    "```\n",    "    \n",    "Below is the code to isolate the table, you will now need to loop through the rows and columns like in the previous lab\n",    "    \n",    "soup.find_all(\"tbody\")[1]\n",    "    \n",    "If you want to use the read_html function the table is located at index 1\n",    "\n",    "We are focusing on quarterly revenue in the lab.\n",    "```\n",    "\n",    "</details>\n"   ]  },  {   "cell_type": "code",   "execution_count": 66,   "metadata": {},   "outputs": [],   "source": [    "tesla_revenue = pd.DataFrame(columns=[\"Date\", \"Revenue\"])\n",    "\n",    "for row in soup.find(\"tbody\").find_all(\"tr\"):\n",    "    cols = row.find_all(\"td\")\n",    "    if len(cols) == 2:\n",    "        date = cols[0].text.strip()\n",    "        revenue = cols[1].text.strip()\n",    "        \n",    "        # Agregar la fila al DataFrame\n",    "        tesla_revenue = pd.concat([tesla_revenue, pd.DataFrame({\"Date\": [date], \"Revenue\": [revenue]})], ignore_index=True)\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Execute the following line to remove the comma and dollar sign from the `Revenue` column. \n"   ]  },  {   "cell_type": "code",   "execution_count": 67,   "metadata": {},   "outputs": [],   "source": [    "tesla_revenue[\"Revenue\"] = tesla_revenue['Revenue'].str.replace(',|\\$',\"\")"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Execute the following lines to remove an null or empty strings in the Revenue column.\n"   ]  },  {   "cell_type": "code",   "execution_count": 68,   "metadata": {},   "outputs": [],   "source": [    "tesla_revenue.dropna(inplace=True)\n",    "\n",    "tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != \"\"]"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Display the last 5 row of the `tesla_revenue` dataframe using the `tail` function. Take a screenshot of the results.\n"   ]  },  {   "cell_type": "code",   "execution_count": 69,   "metadata": {},   "outputs": [    {     "data": {      "text/html": [       "<div>\n",       "<style scoped>\n",       "    .dataframe tbody tr th:only-of-type {\n",       "        vertical-align: middle;\n",       "    }\n",       "\n",       "    .dataframe tbody tr th {\n",       "        vertical-align: top;\n",       "    }\n",       "\n",       "    .dataframe thead th {\n",       "        text-align: right;\n",       "    }\n",       "</style>\n",       "<table border=\"1\" class=\"dataframe\">\n",       "  <thead>\n",       "    <tr style=\"text-align: right;\">\n",       "      <th></th>\n",       "      <th>Date</th>\n",       "      <th>Revenue</th>\n",       "    </tr>\n",       "  </thead>\n",       "  <tbody>\n",       "    <tr>\n",       "      <th>8</th>\n",       "      <td>2013</td>\n",       "      <td>$2,013</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>9</th>\n",       "      <td>2012</td>\n",       "      <td>$413</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>10</th>\n",       "      <td>2011</td>\n",       "      <td>$204</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>11</th>\n",       "      <td>2010</td>\n",       "      <td>$117</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>12</th>\n",       "      <td>2009</td>\n",       "      <td>$112</td>\n",       "    </tr>\n",       "  </tbody>\n",       "</table>\n",       "</div>"      ],      "text/plain": [       "    Date Revenue\n",       "8   2013  $2,013\n",       "9   2012    $413\n",       "10  2011    $204\n",       "11  2010    $117\n",       "12  2009    $112"      ]     },     "execution_count": 69,     "metadata": {},     "output_type": "execute_result"    }   ],   "source": [    "tesla_revenue.tail()"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "## Question 3: Use yfinance to Extract Stock Data\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Using the `Ticker` function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is `GME`.\n"   ]  },  {   "cell_type": "code",   "execution_count": 125,   "metadata": {},   "outputs": [],   "source": [    "gme = yf.Ticker(\"GME\")"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Using the ticker object and the function `history` extract stock information and save it in a dataframe named `gme_data`. Set the `period` parameter to ` \"max\" ` so we get information for the maximum amount of time.\n"   ]  },  {   "cell_type": "code",   "execution_count": 126,   "metadata": {},   "outputs": [],   "source": [    "gme_data = gme.history(period=\"max\")"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "**Reset the index** using the `reset_index(inplace=True)` function on the gme_data DataFrame and display the first five rows of the `gme_data` dataframe using the `head` function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.\n"   ]  },  {   "cell_type": "code",   "execution_count": 127,   "metadata": {},   "outputs": [    {     "data": {      "text/html": [       "<div>\n",       "<style scoped>\n",       "    .dataframe tbody tr th:only-of-type {\n",       "        vertical-align: middle;\n",       "    }\n",       "\n",       "    .dataframe tbody tr th {\n",       "        vertical-align: top;\n",       "    }\n",       "\n",       "    .dataframe thead th {\n",       "        text-align: right;\n",       "    }\n",       "</style>\n",       "<table border=\"1\" class=\"dataframe\">\n",       "  <thead>\n",       "    <tr style=\"text-align: right;\">\n",       "      <th></th>\n",       "      <th>Date</th>\n",       "      <th>Open</th>\n",       "      <th>High</th>\n",       "      <th>Low</th>\n",       "      <th>Close</th>\n",       "      <th>Volume</th>\n",       "      <th>Dividends</th>\n",       "      <th>Stock Splits</th>\n",       "    </tr>\n",       "  </thead>\n",       "  <tbody>\n",       "    <tr>\n",       "      <th>0</th>\n",       "      <td>2002-02-13 00:00:00-05:00</td>\n",       "      <td>1.620129</td>\n",       "      <td>1.693350</td>\n",       "      <td>1.603296</td>\n",       "      <td>1.691667</td>\n",       "      <td>76216000</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>1</th>\n",       "      <td>2002-02-14 00:00:00-05:00</td>\n",       "      <td>1.712707</td>\n",       "      <td>1.716073</td>\n",       "      <td>1.670626</td>\n",       "      <td>1.683250</td>\n",       "      <td>11021600</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>2</th>\n",       "      <td>2002-02-15 00:00:00-05:00</td>\n",       "      <td>1.683250</td>\n",       "      <td>1.687458</td>\n",       "      <td>1.658001</td>\n",       "      <td>1.674834</td>\n",       "      <td>8389600</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>3</th>\n",       "      <td>2002-02-19 00:00:00-05:00</td>\n",       "      <td>1.666418</td>\n",       "      <td>1.666418</td>\n",       "      <td>1.578047</td>\n",       "      <td>1.607504</td>\n",       "      <td>7410400</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>4</th>\n",       "      <td>2002-02-20 00:00:00-05:00</td>\n",       "      <td>1.615920</td>\n",       "      <td>1.662209</td>\n",       "      <td>1.603295</td>\n",       "      <td>1.662209</td>\n",       "      <td>6892800</td>\n",       "      <td>0.0</td>\n",       "      <td>0.0</td>\n",       "    </tr>\n",       "  </tbody>\n",       "</table>\n",       "</div>"      ],      "text/plain": [       "                       Date      Open      High       Low     Close    Volume  \\\n",       "0 2002-02-13 00:00:00-05:00  1.620129  1.693350  1.603296  1.691667  76216000   \n",       "1 2002-02-14 00:00:00-05:00  1.712707  1.716073  1.670626  1.683250  11021600   \n",       "2 2002-02-15 00:00:00-05:00  1.683250  1.687458  1.658001  1.674834   8389600   \n",       "3 2002-02-19 00:00:00-05:00  1.666418  1.666418  1.578047  1.607504   7410400   \n",       "4 2002-02-20 00:00:00-05:00  1.615920  1.662209  1.603295  1.662209   6892800   \n",       "\n",       "   Dividends  Stock Splits  \n",       "0        0.0           0.0  \n",       "1        0.0           0.0  \n",       "2        0.0           0.0  \n",       "3        0.0           0.0  \n",       "4        0.0           0.0  "      ]     },     "execution_count": 127,     "metadata": {},     "output_type": "execute_result"    }   ],   "source": [    "gme_data.reset_index(inplace=True)\n",    "gme_data.head()"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "## Question 4: Use Webscraping to Extract GME Revenue Data\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Use the `requests` library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html. Save the text of the response as a variable named `html_data_2`.\n"   ]  },  {   "cell_type": "code",   "execution_count": 128,   "metadata": {},   "outputs": [],   "source": [    "url_2=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html\"\n",    "html_data_2=requests.get(url_2).text"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Parse the html data using `beautiful_soup` using parser i.e `html5lib` or `html.parser`.\n"   ]  },  {   "cell_type": "code",   "execution_count": 129,   "metadata": {},   "outputs": [],   "source": [    "soup=BeautifulSoup(html_data_2,'html.parser')"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Using `BeautifulSoup` or the `read_html` function extract the table with `GameStop Revenue` and store it into a dataframe named `gme_revenue`. The dataframe should have columns `Date` and `Revenue`. Make sure the comma and dollar sign is removed from the `Revenue` column.\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "> **Note: Use the method similar to what you did in question 2.**  \n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<details><summary>Click here if you need help locating the table</summary>\n",    "\n",    "```\n",    "    \n",    "Below is the code to isolate the table, you will now need to loop through the rows and columns like in the previous lab\n",    "    \n",    "soup.find_all(\"tbody\")[1]\n",    "    \n",    "If you want to use the read_html function the table is located at index 1\n",    "\n",    "\n",    "```\n",    "\n",    "</details>\n"   ]  },  {   "cell_type": "code",   "execution_count": 130,   "metadata": {},   "outputs": [],   "source": [    "gme_revenue = pd.DataFrame(columns=[\"Date\", \"Revenue\"])\n",    "\n",    "for row in soup.find(\"tbody\").find_all(\"tr\"):\n",    "    cols = row.find_all(\"td\")\n",    "    if len(cols) == 2:\n",    "        date = cols[0].text.strip()\n",    "        revenue = cols[1].text.strip()\n",    "\n",    "        gme_revenue = pd.concat([tesla_revenue, pd.DataFrame({\"Date\": [date], \"Revenue\": [revenue]})], ignore_index=True)"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Display the last five rows of the `gme_revenue` dataframe using the `tail` function. Take a screenshot of the results.\n"   ]  },  {   "cell_type": "code",   "execution_count": 131,   "metadata": {},   "outputs": [    {     "data": {      "text/html": [       "<div>\n",       "<style scoped>\n",       "    .dataframe tbody tr th:only-of-type {\n",       "        vertical-align: middle;\n",       "    }\n",       "\n",       "    .dataframe tbody tr th {\n",       "        vertical-align: top;\n",       "    }\n",       "\n",       "    .dataframe thead th {\n",       "        text-align: right;\n",       "    }\n",       "</style>\n",       "<table border=\"1\" class=\"dataframe\">\n",       "  <thead>\n",       "    <tr style=\"text-align: right;\">\n",       "      <th></th>\n",       "      <th>Date</th>\n",       "      <th>Revenue</th>\n",       "    </tr>\n",       "  </thead>\n",       "  <tbody>\n",       "    <tr>\n",       "      <th>9</th>\n",       "      <td>2012-01-01 00:00:00</td>\n",       "      <td>413</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>10</th>\n",       "      <td>2011-01-01 00:00:00</td>\n",       "      <td>204</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>11</th>\n",       "      <td>2010-01-01 00:00:00</td>\n",       "      <td>117</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>12</th>\n",       "      <td>2009-01-01 00:00:00</td>\n",       "      <td>112</td>\n",       "    </tr>\n",       "    <tr>\n",       "      <th>13</th>\n",       "      <td>2005</td>\n",       "      <td>$1,843</td>\n",       "    </tr>\n",       "  </tbody>\n",       "</table>\n",       "</div>"      ],      "text/plain": [       "                   Date Revenue\n",       "9   2012-01-01 00:00:00     413\n",       "10  2011-01-01 00:00:00     204\n",       "11  2010-01-01 00:00:00     117\n",       "12  2009-01-01 00:00:00     112\n",       "13                 2005  $1,843"      ]     },     "execution_count": 131,     "metadata": {},     "output_type": "execute_result"    }   ],   "source": [    "gme_revenue.tail()"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "## Question 5: Plot Tesla Stock Graph\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Use the `make_graph` function to graph the Tesla Stock Data, also provide a title for the graph. Note the graph will only show data upto June 2021.\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<details><summary>Hint</summary>\n",    "\n",    "```\n",    "\n",    "You just need to invoke the make_graph function with the required parameter to print the graphs.The structure to call the `make_graph` function is `make_graph(tesla_data, tesla_revenue, 'Tesla')`.\n",    "\n",    "```\n",    "    \n",    "</details>\n"   ]  },  {   "cell_type": "code",   "execution_count": 70,   "metadata": {},   "outputs": [    {     "data": {      "image/png": "",      "text/plain": [       "<Figure size 1000x600 with 1 Axes>"      ]     },     "metadata": {},     "output_type": "display_data"    }   ],   "source": [    "# Paso 1: Importar librerías necesarias\n",    "import pandas as pd\n",    "import matplotlib.pyplot as plt\n",    "from bs4 import BeautifulSoup\n",    "import requests\n",    "\n",    "# Paso 2: Limpiar los datos\n",    "tesla_revenue[\"Revenue\"] = tesla_revenue[\"Revenue\"].str.replace(',', '').str.replace('$', '')\n",    "tesla_revenue = tesla_revenue[tesla_revenue[\"Revenue\"] != \"\"]\n",    "tesla_revenue.dropna(inplace=True)\n",    "\n",    "# Convertir las columnas al tipo adecuado\n",    "tesla_revenue[\"Revenue\"] = pd.to_numeric(tesla_revenue[\"Revenue\"])\n",    "tesla_revenue[\"Date\"] = pd.to_datetime(tesla_revenue[\"Date\"])\n",    "\n",    "# Paso 3: Filtrar hasta junio 2021\n",    "tesla_revenue = tesla_revenue[tesla_revenue[\"Date\"] <= \"2021-06-30\"]\n",    "\n",    "# Paso 4: Definir la función make_graph\n",    "def make_graph(dataframe, title):\n",    "    plt.figure(figsize=(10, 6))\n",    "    plt.plot(dataframe['Date'], dataframe['Revenue'])\n",    "    plt.title(title)\n",    "    plt.xlabel('Date')\n",    "    plt.ylabel('Revenue (in millions)')\n",    "    plt.xticks(rotation=45)\n",    "    plt.tight_layout()\n",    "    plt.show()\n",    "\n",    "# Paso 5: Graficar los ingresos de Tesla\n",    "make_graph(tesla_revenue, 'Tesla Revenue up to June 2021')"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "## Question 6: Plot GameStop Stock Graph\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "Use the `make_graph` function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the `make_graph` function is `make_graph(gme_data, gme_revenue, 'GameStop')`. Note the graph will only show data upto June 2021.\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<details><summary>Hint</summary>\n",    "\n",    "```\n",    "\n",    "You just need to invoke the make_graph function with the required parameter to print the graphs.The structure to call the `make_graph` function is `make_graph(gme_data, gme_revenue, 'GameStop')`\n",    "\n",    "```\n",    "    \n",    "</details>\n"   ]  },  {   "cell_type": "code",   "execution_count": 133,   "metadata": {},   "outputs": [    {     "data": {      "image/png": "",      "text/plain": [       "<Figure size 1000x600 with 1 Axes>"      ]     },     "metadata": {},     "output_type": "display_data"    }   ],   "source": [    "# Paso 1: Limpiar la columna de ingresos\n",    "gme_revenue[\"Revenue\"] = gme_revenue[\"Revenue\"].str.replace(',', '').str.replace('$', '')\n",    "gme_revenue = gme_revenue[gme_revenue[\"Revenue\"] != \"\"]\n",    "gme_revenue.dropna(inplace=True)\n",    "gme_revenue[\"Revenue\"] = pd.to_numeric(gme_revenue[\"Revenue\"])\n",    "gme_revenue[\"Date\"] = pd.to_datetime(gme_revenue[\"Date\"])\n",    "gme_revenue = gme_revenue[gme_revenue[\"Date\"] <= \"2021-06-30\"]\n",    "\n",    "# Paso 2: Filtrar datos de acciones (stock) hasta junio 2021\n",    "# Se asume que ya tenés gme_data cargado (por ejemplo con yfinance o ya proporcionado por el curso)\n",    "gme_data['Date'] = pd.to_datetime(gme_data['Date'])\n",    "gme_data = gme_data[gme_data['Date'] <= '2021-06-30']\n",    "\n",    "# Paso 3: Llamar a la función para graficar\n",    "make_graph(gme_revenue, 'GameStop')"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "<h2>About the Authors:</h2> \n",    "\n",    "<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n",    "\n",    "Azim Hirjani\n"   ]  },  {   "cell_type": "markdown",   "metadata": {},   "source": [    "## Change Log\n",    "\n",    "| Date (YYYY-MM-DD) | Version | Changed By    | Change Description        |\n",    "| ----------------- | ------- | ------------- | ------------------------- |\n",    "| 2022-02-28        | 1.2     | Lakshmi Holla | Changed the URL of GameStop |\n",    "| 2020-11-10        | 1.1     | Malika Singla | Deleted the Optional part |\n",    "| 2020-08-27        | 1.0     | Malika Singla | Added lab to GitLab       |\n",    "\n",    "<hr>\n",    "\n",    "## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n",    "\n",    "<p>\n"   ]  } ], "metadata": {  "kernelspec": {   "display_name": "Python 3 (ipykernel)",   "language": "python",   "name": "python3"  },  "language_info": {   "codemirror_mode": {    "name": "ipython",    "version": 3   },   "file_extension": ".py",   "mimetype": "text/x-python",   "name": "python",   "nbconvert_exporter": "python",   "pygments_lexer": "ipython3",   "version": "3.12.8"  },  "prev_pub_hash": "847bbe99ddd9f2dc606aa9f731e386824fa521d0c7e38672c5f080f5d71a8326" }, "nbformat": 4, "nbformat_minor": 4}